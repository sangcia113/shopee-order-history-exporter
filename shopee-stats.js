/**
 * ===================================================================================
 * SCRIPT TH·ªêNG K√ä CHI TI√äU SHOPEE (PHI√äN B·∫¢N CONSOLE + XU·∫§T EXCEL XLSX)
 * * H∆∞·ªõng d·∫´n:
 * 1. M·ªü trang Shopee.vn v√† ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n.
 * 2. M·ªü C√¥ng c·ª• cho nh√† ph√°t tri·ªÉn (Nh·∫•n F12 ho·∫∑c Ctrl+Shift+I).
 * 3. Chuy·ªÉn qua tab "Console".
 * 4. D√°n to√†n b·ªô ƒëo·∫°n code n√†y v√†o v√† nh·∫•n Enter.
 * 5. Ch·ªù script ch·∫°y xong, xem k·∫øt qu·∫£ trong Console v√† file Excel (XLSX) s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c t·∫£i v·ªÅ.
 * ===================================================================================
 */

async function thongKeChiTieuShopee() {
    console.log("%cB·∫Øt ƒë·∫ßu qu√° tr√¨nh th·ªëng k√™ chi ti√™u Shopee...", "color: blue; font-size: 16px; font-weight: bold;");

    try {
        // T·∫£i th∆∞ vi·ªán SheetJS ƒë·ªÉ x·ª≠ l√Ω file XLSX
        await loadScript('https://cdn.sheetjs.com/xlsx-0.20.2/package/dist/xlsx.full.min.js');
        console.log('%cTh∆∞ vi·ªán SheetJS ƒë·ªÉ xu·∫•t Excel ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.', 'color: green;');

        const allProducts = await fetchAllOrders();

        if (allProducts.length === 0) {
            console.warn("%cKh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ho·∫∑c c√≥ l·ªói khi l·∫•y d·ªØ li·ªáu. B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p v√†o Shopee ch∆∞a?", "color: orange; font-size: 14px;");
            return;
        }

        const summary = calculateSummary(allProducts);
        
        logConsoleSummary(summary);

        // ƒê√É X√ìA: Ph·∫ßn hi·ªÉn th·ªã b·∫£ng chi ti·∫øt tr√™n console ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè theo y√™u c·∫ßu.

        console.log("%cƒêang chu·∫©n b·ªã file Excel (XLSX) ƒë·ªÉ t·∫£i xu·ªëng...", "color: blue; font-size: 14px;");
        const dataForExport = allProducts.map(p => ({
            'M√£ ƒë∆°n h√†ng': p['M√£ ƒë∆°n h√†ng'],
            'T√™n s·∫£n ph·∫©m': p['T√™n s·∫£n ph·∫©m'],
            'Lo·∫°i s·∫£n ph·∫©m': p['Lo·∫°i s·∫£n ph·∫©m'],
            'S·ªë l∆∞·ª£ng': p['S·ªë l∆∞·ª£ng'],
            'ƒê∆°n gi√° ch∆∞a gi·∫£m': p['ƒê∆°n gi√° ch∆∞a gi·∫£m'],
            'T·ªïng gi√° tr·ªã': p['T·ªïng gi√° tr·ªã'],
            'Ti·∫øt ki·ªám ƒë∆∞·ª£c': p['Ti·∫øt ki·ªám ƒë∆∞·ª£c']
        }));

        // G·ªçi h√†m downloadXLSX v·ªõi summary ƒë·ªÉ t√≠nh t·ªïng
        downloadXLSX(dataForExport, summary, 'thong-ke-shopee.xlsx');
        console.log("%cT·∫£i file Excel (XLSX) th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra th∆∞ m·ª•c Downloads c·ªßa b·∫°n.", "color: green; font-size: 16px; font-weight: bold;");


    } catch (error) {
        console.error("ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng:", error);
        console.error(`%cVui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi v√† ch·∫Øc ch·∫Øn b·∫°n ƒëang ·ªü trang Shopee.vn ƒë√£ ƒëƒÉng nh·∫≠p. L·ªói: ${error.message}`, "font-size: 14px;");
    }
}

/**
 * T·∫£i m·ªôt script t·ª´ URL v√† tr·∫£ v·ªÅ m·ªôt Promise
 * @param {string} url URL c·ªßa script c·∫ßn t·∫£i
 */
function loadScript(url) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = url;
        script.onload = () => resolve();
        script.onerror = () => reject(new Error(`Kh√¥ng th·ªÉ t·∫£i script t·ª´: ${url}`));
        document.head.appendChild(script);
    });
}


/**
 * L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng t·ª´ c√°c trang API
 */
async function fetchAllOrders() {
    let offset = 0;
    const limit = 20; // S·ªë ƒë∆°n h√†ng m·ªói l·∫ßn g·ªçi API
    let hasMore = true;
    const allProducts = [];
    let totalOrdersFetched = 0;

    while (hasMore) {
        console.log(`ƒêang l·∫•y d·ªØ li·ªáu... ƒê√£ qu√©t ${totalOrdersFetched} ƒë∆°n h√†ng.`);
        const url = `https://shopee.vn/api/v4/order/get_order_list?list_type=3&offset=${offset}&limit=${limit}`;
        
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`L·ªói m·∫°ng: ${response.status} ${response.statusText}`);
            }
            const jsonResponse = await response.json();

            if (jsonResponse.error) {
                throw new Error(`L·ªói t·ª´ Shopee API: ${jsonResponse.error_msg || 'Vui l√≤ng ƒëƒÉng nh·∫≠p'}`);
            }

            const orders = jsonResponse.data?.details_list || [];
            if (orders.length === 0) {
                hasMore = false;
                continue;
            }
            
            totalOrdersFetched += orders.length;
            processOrders(orders, allProducts);

            offset += limit;
            hasMore = orders.length >= limit;

        } catch (error) {
            console.error(`L·ªói khi l·∫•y ƒë∆°n h√†ng t·∫°i offset ${offset}:`, error);
            hasMore = false; // D·ª´ng l·∫°i n·∫øu c√≥ l·ªói
            throw error; // N√©m l·ªói ra ngo√†i ƒë·ªÉ h√†m ch√≠nh x·ª≠ l√Ω
        }
    }
    console.log(`%cQu√©t d·ªØ li·ªáu ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω ${totalOrdersFetched} ƒë∆°n h√†ng.`, "color: green; font-size: 14px;");
    return allProducts;
}

/**
 * X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ m·ªôt l√¥ ƒë∆°n h√†ng v√† th√™m v√†o danh s√°ch t·ªïng
 */
function processOrders(orders, allProducts) {
     orders.forEach(order => {
        const orderId = order.info_card?.order_id;
        const orderFinalTotal = (order.info_card?.final_total || 0) / 100000;
        let orderOriginalTotal = 0;
        const itemsInOrder = [];

        order.info_card?.order_list_cards.forEach(card => {
            card.product_info?.item_groups.forEach(group => {
                group.items.forEach(item => {
                    const originalPrice = (item.item_price || 0) / 100000;
                    const amount = item.amount || 0;
                    orderOriginalTotal += originalPrice * amount;
                    itemsInOrder.push(item);
                });
            });
        });

        // S·ª¨A L·ªñI: ƒê√£ s·ª≠a l·∫°i c√¥ng th·ª©c t√≠nh discountRatio cho ch√≠nh x√°c
        const discountRatio = (orderOriginalTotal > 0 && orderFinalTotal > 0) ? (orderFinalTotal / orderOriginalTotal) : 1;

        itemsInOrder.forEach(item => {
            const originalPrice = (item.item_price || 0) / 100000;
            const amount = item.amount || 0;
            const discountedPrice = originalPrice * discountRatio;

            allProducts.push({
                'M√£ ƒë∆°n h√†ng': orderId,
                'T√™n s·∫£n ph·∫©m': item.name,
                'Lo·∫°i s·∫£n ph·∫©m': item.model_name || 'N/A',
                'M√£ s·∫£n ph·∫©m': item.model_id,
                'S·ªë l∆∞·ª£ng': amount,
                'ƒê∆°n gi√° ch∆∞a gi·∫£m': originalPrice,
                'ƒê∆°n gi√° ƒë√£ gi·∫£m': discountedPrice,
                'T·ªïng gi√° tr·ªã': discountedPrice * amount,
                'Ti·∫øt ki·ªám ƒë∆∞·ª£c': (originalPrice - discountedPrice) * amount,
            });
        });
    });
}

/**
 * T√≠nh to√°n c√°c s·ªë li·ªáu t·ªïng h·ª£p t·ª´ danh s√°ch s·∫£n ph·∫©m
 */
function calculateSummary(allProducts) {
    const summary = allProducts.reduce((acc, product) => {
        acc.totalSpent += product['T·ªïng gi√° tr·ªã'];
        acc.totalOriginal += product['ƒê∆°n gi√° ch∆∞a gi·∫£m'] * product['S·ªë l∆∞·ª£ng'];
        acc.totalItems += product['S·ªë l∆∞·ª£ng'];
        acc.orderIds.add(product['M√£ ƒë∆°n h√†ng']);
        return acc;
    }, {
        totalSpent: 0,
        totalOriginal: 0,
        totalItems: 0,
        orderIds: new Set(),
    });

    return {
        totalSpent: summary.totalSpent,
        totalSaved: summary.totalOriginal - summary.totalSpent,
        totalItems: summary.totalItems,
        totalOrders: summary.orderIds.size,
    };
}

/**
 * Log k·∫øt qu·∫£ t·ªïng h·ª£p ra Console
 */
function logConsoleSummary(summary) {
    console.log('================================');
    console.log('%c' + getPXGCert(summary.totalSpent), 'font-size:26px; color: #d97706; font-weight: bold;');
    console.log('%c(1)S·ªë ti·ªÅn b·∫°n ƒê√É ƒê·ªêT v√†o Shopee l√†: ' + '%c' + formatPrice(summary.totalSpent) + ' vnƒë%c', 'font-size: 20px;', 'font-size: 26px; color:orange;font-weight:700', 'font-size: 20px;');
    console.log('================================');
    console.log('%c(2)T·ªïng ƒë∆°n h√†ng ƒë√£ giao: ' + '%c' + formatPrice(summary.totalOrders, 0) + ' ƒë∆°n h√†ng', 'font-size: 20px;', 'font-size: 20px; color:green');
    console.log('%c(3)S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t: ' + '%c' + formatPrice(summary.totalItems, 0) + ' s·∫£n ph·∫©m', 'font-size: 20px;', 'font-size: 20px; color:#fc0000');
    console.log('%c(4)T·ªïng ti·ªÅn TI·∫æT KI·ªÜM ƒë∆∞·ª£c nh·ªù sƒÉn sale: ' + '%c' + formatPrice(summary.totalSaved) + ' vnƒë', 'font-size: 18px;', 'font-size: 18px; color:green');
    console.log('%cüí∞T·ªîNG TI·∫æT KI·ªÜM: ' + '%c' + formatPrice(summary.totalSaved) + ' vnƒë', 'font-size: 24px;', 'font-size: 24px; color:orange;font-weight:700');
    console.log('================================');
}

// --- C√°c h√†m ti·ªán √≠ch ---
function getPXGCert(pri) {
    if (pri <= 10000000) return 'H√äN QU√Å! B·∫†N CH∆ØA B·ªä SHOPEE G√ÇY NGHI·ªÜN üòç';
    if (pri > 10000000 && pri <= 50000000) return 'TH√îI XONG! B·∫†N B·∫ÆT ƒê·∫¶U NGHI·ªÜN SHOPEE R·ªíI üòÇ';
    if (pri > 50000000 && pri < 80000000) return '·ªêI GI·ªúI ∆†I! B·∫†N L√Ä CON NGHI·ªÜN SHOPEE CH√çNH HI·ªÜU ÔøΩ';
    return 'X√ìA APP SHOPEE TH√îI! B·∫†N NGHI·ªÜN SHOPEE N·∫∂NG QU√Å R·ªíI üòù';
}

function formatPrice(number, fixed = 2) {
    if (isNaN(number)) return 0;
    number = Number(number.toFixed(fixed));
    return number.toLocaleString('vi-VN', { minimumFractionDigits: 0, maximumFractionDigits: 2 });
}

// --- M·ªöI: H√ÄM XU·∫§T FILE XLSX ---

/**
 * T·∫°o v√† t·∫£i file XLSX s·ª≠ d·ª•ng th∆∞ vi·ªán SheetJS
 * @param {Array<Object>} data M·∫£ng d·ªØ li·ªáu s·∫£n ph·∫©m
 * @param {Object} summary D·ªØ li·ªáu t·ªïng h·ª£p
 * @param {string} filename T√™n file ƒë·ªÉ t·∫£i v·ªÅ
 */
function downloadXLSX(data, summary, filename) {
    // T·∫°o m·ªôt worksheet t·ª´ m·∫£ng d·ªØ li·ªáu JSON
    const ws = XLSX.utils.json_to_sheet(data);

    // Th√™m d√≤ng t·ªïng c·ªông
    const totalRow = {
        'T√™n s·∫£n ph·∫©m': 'T·ªîNG C·ªòNG:',
        'T·ªïng gi√° tr·ªã': summary.totalSpent,
        'Ti·∫øt ki·ªám ƒë∆∞·ª£c': summary.totalSaved
    };
    XLSX.utils.sheet_add_json(ws, [totalRow], {
        header: Object.keys(data[0]),
        skipHeader: true,
        origin: -1
    });

    // ƒê·ªãnh d·∫°ng c√°c c·ªôt ti·ªÅn t·ªá l√† ki·ªÉu s·ªë
    const range = XLSX.utils.decode_range(ws['!ref']);
    // C√°c c·ªôt c·∫ßn ƒë·ªãnh d·∫°ng (E, F, G) t∆∞∆°ng ·ª©ng v·ªõi 'ƒê∆°n gi√° ch∆∞a gi·∫£m', 'T·ªïng gi√° tr·ªã', 'Ti·∫øt ki·ªám ƒë∆∞·ª£c'
    const moneyColumns = [4, 5, 6]; 
    for (let R = range.s.r + 1; R <= range.e.r; ++R) { // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 2 (index 1) ƒë·ªÉ b·ªè qua header
        moneyColumns.forEach(C => {
            const cell_address = { c: C, r: R };
            const cell_ref = XLSX.utils.encode_cell(cell_address);
            if (ws[cell_ref] && ws[cell_ref].v !== undefined) {
                 ws[cell_ref].t = 'n'; // 'n' for number
                 ws[cell_ref].z = '#,##0'; // ƒê·ªãnh d·∫°ng s·ªë c√≥ d·∫•u ph·∫©y, kh√¥ng c√≥ s·ªë th·∫≠p ph√¢n
            }
        });
    }
    
    // T·∫°o m·ªôt workbook m·ªõi
    const wb = XLSX.utils.book_new();
    
    // Th√™m worksheet v√†o workbook
    XLSX.utils.book_append_sheet(wb, ws, "ThongKeShopee");
    
    // Ghi file v√† k√≠ch ho·∫°t t·∫£i xu·ªëng
    XLSX.writeFile(wb, filename);
}


// T·ª± ƒë·ªông ch·∫°y h√†m ch√≠nh
thongKeChiTieuShopee();
ÔøΩ
